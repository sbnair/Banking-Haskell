-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Bibiiii/haskellBankingApp#readme</a>
@package haskellBankingApp
@version 0.1.0.0


-- | <ul>
--   <li>Customer</li>
--   <li>Account</li>
--   </ul>
module DataTypes

-- | The Customer constructor creates a new record for a customer |
--   Customer is a derivation of the Show and Generic instances
data Customer
Customer :: String -> Int -> Int -> Customer

-- | The customer name of type String
[name] :: Customer -> String

-- | The account number of type Int
[number] :: Customer -> Int

-- | The account balance of type Int
[balance] :: Customer -> Int

-- | The <a>Account</a> type is a TVar of type <a>Customer</a>
type Account = TVar Customer
instance GHC.Generics.Generic DataTypes.Customer
instance GHC.Show.Show DataTypes.Customer


-- | <ul>
--   <li>draw</li>
--   <li>helpers for draw</li>
--   </ul>
module PrintData

-- | The <a>draw</a> function pretty-prints account details for a given
--   Customer. It returns a layout <a>Doc</a> (defined in PrettyPrint)
draw :: Customer -> Doc


-- | <ul>
--   <li>selectRandomNumber</li>
--   <li>selectRandomName</li>
--   <li>selectRandomAccount</li>
--   </ul>
module SelectRandom

-- | The <a>selectRandomName</a> function returns a random name from a list
--   of Strings
selectRandomName :: [String] -> IO String

-- | The <a>selectRandomNumber</a> function returns an IO action with a
--   random number in a given range
selectRandomNumber :: Int -> Int -> IO Int

-- | The <a>selectRandomAccount</a> function returns a random account from
--   a list of Accounts
selectRandomAccount :: [IO Account] -> IO Account


-- | <ul>
--   <li>txtToList</li>
--   </ul>
module Util

-- | The <a>txtToList</a> function takes a file and returns a list of the
--   items in it
txtToList :: FilePath -> IO [String]


-- | <ul>
--   <li>createAccount</li>
--   <li>showAccount</li>
--   <li>transferRandom</li>
--   <li>credit</li>
--   <li>debit</li>
--   <li>transfer</li>
--   </ul>
module AccountActions

-- | The <a>createAccount</a> function saves a new Customer Account. It
--   returns a <a>newTVarIO</a> of the saved account, in <a>Customer</a>
--   format.
createAccount :: Int -> IO Account

-- | The <a>createCustomer</a> function creates a Customer account. It
--   returns a new Customer record with a random name, the given account
--   number and account balance.
createCustomer :: Int -> IO Customer

-- | The <a>showAccount</a> function displays the account in a table format
--   It returns an empty IO action
showAccount :: Account -> IO ()

-- | The <a>transferRandom</a> function selects two random accounts and a
--   random amount to transfer between them. It performs a random delay
--   after the action. It returns an empty IO action
transferRandom :: [Account] -> IO ()

-- | The <a>credit</a> function reads the balance of an account and credits
--   it with the given amount. It writes the new balance to the Account
--   TVar. It returns an empty STM action
credit :: Int -> Account -> STM ()

-- | The <a>debit</a> function reads the balance of an account and debits
--   the specified amount from the account. It writes the new balance to
--   the Account TVar. It returns an empty STM action
debit :: Int -> Account -> STM ()

-- | The <a>transfer</a> function debits one customer account, and credits
--   the amount to another customer account. It makes use of the
--   <a>credit</a> and <a>debit</a> functions. It uses <a>atomically</a> to
--   ensure that actions are isolated. It returns an empty IO action
transfer :: Int -> Account -> Account -> STM ()
